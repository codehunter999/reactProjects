ㅁ yarn server 구동(개발전용서버)
  - cd hello-react (hello-react는 현재 개발중인 프로젝트 폴더)
  - yarn start

ㅁ 리액트 메뉴얼
  - https://facebook.github.io/react/docs/events.html

ㅁ 입력값의 로그를 console에 남김
  - console에 기록될 객체는 항상 초기화 된다.
  - 비동기적으로 객체를 참조할 일이 있다면. 
  - persist() 함수 호출
<<example>>
  <input
      type="text"
      name="message"
      placeholder="아무거나 입력해 보세요"
      onChange={
     	 (e) => {
	      console.log(e.target.value);
             }
      }
 />

ㅁ Method Binding
  - 바벨의 transform-class-properties 문법 사용

ㅁ react에서 '...'의 의미
  - 자바스크립트의 "전개연산자"임 
    => 기존의 객체안에 있는 내용을 해당 위치에다가 풀어준다는 의미죠. 그 다음에, 우리가 설정하고 싶은 값을 또 넣어주면 해당 값을 덮어쓰게 됩니다.

ㅁ React.memo => 컴포넌트 성능 최적화
  - 컴포넌트의 props가 바뀌지 않았다면, 리렌더링하지 않도록 설정하여 함수형 컴포넌트의 리렌더링 성능을 최적화해 줄 수 있습니다.
  -> todos 배열이 업데이트 되면 onRemove/onToggle 함수도 새롭게 바뀌기 때문에 배열이 바뀔 때마다 함수가 새로 만들어짐..
      --> 함수 새로 만들어짐을 방지하는 방법은 
	1. useState의 함수형 업데이트 기능 사용
	2. useReduce를 사용하는 것

ㅁ 프로덕션 모드로 구동(프로젝트 디렉터리에서 구동)
  - yarn build
  - yarn global add serve
  - serve -s build






















